#!/bin/bash

#
# This script is intended as a helper when updating from
# Xenial. When complete you should have a copy of
# the Raring master branch changelog with the correct release names.
#
SOURCE_RELEASE=bionic
SOURCE_RELEASE_BRANCH=${_SOURCE_RELEASE_BRANCH:=master-next}
DEBIAN_SOURCE=debian.master

TARGET_RELEASE=xenial
TARGET_RELEASE_BRANCH=hwe
TARGET_RELEASE_NUMBER=16.04
DEBIAN_TARGET=debian.${TARGET_RELEASE_BRANCH}

DEF_REPO=git://git.launchpad.net/~ubuntu-kernel/ubuntu/+source/linux/+git/${SOURCE_RELEASE}
RELEASE_REPO=${_DEF_REPO:=${DEF_REPO}}
DEF_ARCHES="i386 amd64 armhf arm64 ppc64el"
FOREIGN_ARCHES=

#
# PPAs do not have a proposed pocket. The default assumes the
# real archive is the upload target.
#
POCKET=""
IGNORE_ABI=""
IGNORE_MODULES=""

usage="$0 [-r RELEASE_REPO] [-p]"

#
# command line options:
# [-r RELEASE_REPO] - override default ${SOURCE_RELEASE} git repository.
# [-p] - Assume the upload target is a PPA

while getopts ":r:pim" opt; do
	case $opt in
	r ) RELEASE_REPO="$OPTARG" ;;
	p ) POCKET="" ;;
	\? ) echo usage: ${usage}; exit ;;
	esac
done
shift $(($OPTIND - 1))

if [ ! -d ${DEBIAN_TARGET} ]
then
	echo You must run this sript from the top directory of this repository.
	exit 1
fi

#
# Fetch the upstream branch.
#
git fetch ${RELEASE_REPO} || exit 1
git fetch ${RELEASE_REPO} ${SOURCE_RELEASE_BRANCH} || exit 1

#
# Find the most recent tag on ${SOURCE_RELEASE} ${SOURCE_RELEASE_BRANCH}, then
# rebase against it. This avoids the case where there have been some
# commits since the last official tag.
#
MASTER_COMMIT=`git log --pretty=one FETCH_HEAD | \
    awk '
	/Ubuntu-/ {
		if (match($0, /UBUNTU: Ubuntu-[0-9]/)) {
				print $1
				exit
                        }
                }
        '
`
#
# Find the current merge point where ${SOURCE_RELEASE} was based.
#
BASE_COMMIT=`git log --pretty=one | \
    awk '
	/Ubuntu-/ {
		if (match($0, /UBUNTU: Ubuntu-[0-9]/)) {
				print $1
				exit
                        }
                }
        '
`
if [ "${MASTER_COMMIT}" = "${BASE_COMMIT}" ]
then
	echo Already up to date.
	if [ -z "$SKIP_REBASE_IF_UPTODATE" ]; then
		exit 1
	fi
elif ! git rebase --onto ${MASTER_COMMIT} ${BASE_COMMIT}
then
	exit 1
fi

"./${DEBIAN_TARGET}/scripts/helpers/copy-files"

fakeroot debian/rules clean updateconfigs

#
# A little hack to avoid touching the ABI files if we are called from
# cranky (which sets SKIP_REBASE_IF_UPTODATE).
#
if [ -z "$SKIP_REBASE_IF_UPTODATE" ]; then
	#
	# Download the ABI files from the previous build
	#
	PREV_VERSION=$(dpkg-parsechangelog -l ${DEBIAN_TARGET}/changelog \
			-SVersion)
	echo "prev abi ver ${PREV_VERSION}"
	./debian/scripts/misc/getabis ${PREV_VERSION} || exit 1
	git add ${DEBIAN_TARGET}/abi
fi

# Stage the bits we changed.
git add ${DEBIAN_TARGET}/d-i ${DEBIAN_TARGET}/config \
	${DEBIAN_TARGET}/rules.d/*.mk ${DEBIAN_TARGET}/reconstruct \
	${DEBIAN_TARGET}/modprobe.d

#
# Update changelog from the source release changelog.
# Change the release pocket and ABI.
#
cp ${DEBIAN_SOURCE}/changelog ${DEBIAN_TARGET}/changelog
sed -i -e '1s/'${SOURCE_RELEASE}'.*;/'${TARGET_RELEASE}${POCKET}';/' -e '1s/^linux /linux-'${TARGET_RELEASE_BRANCH}' /' -e '1s/)/~'${TARGET_RELEASE_NUMBER}'.1)/' ${DEBIAN_TARGET}/changelog
git add ${DEBIAN_TARGET}/changelog

#
# Tell them what to do next ...
#
FINAL_VERSION_NAME="Ubuntu-hwe-"`dpkg-parsechangelog -l${DEBIAN_TARGET}/changelog  | awk '/^Version:/ {print $2}'`
FINAL_VERSION_TAG=`echo "${FINAL_VERSION_NAME}" | sed -e 's/~/_/'`
echo "git commit -a -s -m 'UBUNTU: ${FINAL_VERSION_NAME}'"
echo "git tag -s -m '${FINAL_VERSION_NAME}' '${FINAL_VERSION_TAG}'"
